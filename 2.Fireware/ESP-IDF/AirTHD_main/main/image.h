
#ifndef __IMAGE_H
#define __IMAGE_H


#ifdef LV_LVGL_H_INCLUDE_SIMPLE
#include "lvgl.h"
#else
#include "lvgl/lvgl.h"
#endif

#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif
#ifndef LV_ATTRIBUTE_IMG_HUM
#define LV_ATTRIBUTE_IMG_HUM
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_HUM uint8_t HUM_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x01, 0x80, 
  0x02, 0x40, 
  0x04, 0x20, 
  0x08, 0x10, 
  0x08, 0x10, 
  0x10, 0x08, 
  0x10, 0x08, 
  0x20, 0x04, 
  0x20, 0x04, 
  0x20, 0x04, 
  0x24, 0x04, 
  0x22, 0x04, 
  0x11, 0x08, 
  0x08, 0x10, 
  0x06, 0x60, 
  0x01, 0x80, 
};

const static lv_img_dsc_t HUM = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = HUM_map,
};



#ifndef LV_ATTRIBUTE_IMG_TEMP
#define LV_ATTRIBUTE_IMG_TEMP
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_TEMP uint8_t TEMP_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x00, 0x00, 
  0x01, 0x80, 
  0x02, 0x40, 
  0x04, 0x20, 
  0x04, 0x20, 
  0x04, 0x20, 
  0x05, 0xa0, 
  0x05, 0xa0, 
  0x05, 0xa0, 
  0x09, 0x90, 
  0x1b, 0xd8, 
  0x13, 0xc8, 
  0x1b, 0xd8, 
  0x09, 0x90, 
  0x04, 0x20, 
  0x03, 0xc0, 
};

const static lv_img_dsc_t TEMP = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = TEMP_map,
};

#ifndef LV_ATTRIBUTE_IMG_ECO2
#define LV_ATTRIBUTE_IMG_ECO2
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_ECO2 uint8_t ECO2_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x3f, 0xfc, 
  0x20, 0x04, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x0e, 0xf0, 
  0x08, 0x90, 
  0x08, 0x90, 
  0xe8, 0x90, 
  0xa8, 0x97, 
  0xe8, 0x91, 
  0x88, 0x97, 
  0xee, 0xf4, 
  0x00, 0x07, 
  0x00, 0x00, 
  0x20, 0x04, 
  0x3f, 0xfc, 
};

const static lv_img_dsc_t ECO2 = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = ECO2_map,
};

#ifndef LV_ATTRIBUTE_IMG_TVOC
#define LV_ATTRIBUTE_IMG_TVOC
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_TVOC uint8_t TVOC_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x3f, 0xf8, 
  0x20, 0x08, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xea, 0xee, 
  0x4a, 0xa8, 
  0x4a, 0xa8, 
  0x4a, 0xa8, 
  0x4a, 0xa8, 
  0x44, 0xee, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x20, 0x08, 
  0x3f, 0xf8, 
};

const static lv_img_dsc_t TVOC = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = TVOC_map,
};

#ifndef LV_ATTRIBUTE_IMG_BLUETOOTH
#define LV_ATTRIBUTE_IMG_BLUETOOTH
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_BLUETOOTH uint8_t BLUETOOTH_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x00, 0x00, 
  0x01, 0xc0, 
  0x01, 0xe0, 
  0x11, 0xb0, 
  0x19, 0x98, 
  0x0d, 0x98, 
  0x07, 0xb0, 
  0x03, 0xe0, 
  0x03, 0xe0, 
  0x07, 0xb0, 
  0x0d, 0x98, 
  0x19, 0x98, 
  0x11, 0xb0, 
  0x01, 0xe0, 
  0x01, 0x80, 
  0x00, 0x00, 
};

const static lv_img_dsc_t BLUETOOTH = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = BLUETOOTH_map,
};

#ifndef LV_ATTRIBUTE_IMG_BATTEY_0
#define LV_ATTRIBUTE_IMG_BATTEY_0
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_BATTEY_0 uint8_t BATTEY_0_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0xc0, 0x07, 
  0xc0, 0x07, 
  0xc0, 0x07, 
  0xc0, 0x07, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
};

const static lv_img_dsc_t BATTEY_0 = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = BATTEY_0_map,
};

#ifndef LV_ATTRIBUTE_IMG_BATTEY_1
#define LV_ATTRIBUTE_IMG_BATTEY_1
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_BATTEY_1 uint8_t BATTEY_1_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0xc0, 0x07, 
  0xdc, 0x07, 
  0xdc, 0x07, 
  0xc0, 0x07, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
};

const static lv_img_dsc_t BATTEY_1 = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = BATTEY_1_map,
};

#ifndef LV_ATTRIBUTE_IMG_BATTEY_2
#define LV_ATTRIBUTE_IMG_BATTEY_2
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_BATTEY_2 uint8_t BATTEY_2_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0xc0, 0x07, 
  0xdf, 0x87, 
  0xdf, 0x87, 
  0xc0, 0x07, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
};

const static lv_img_dsc_t BATTEY_2 = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = BATTEY_2_map,
};

#ifndef LV_ATTRIBUTE_IMG_BATTEY_3
#define LV_ATTRIBUTE_IMG_BATTEY_3
#endif
const static LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_BATTEY_3 uint8_t BATTEY_3_map[] = {
  0xff, 0xff, 0xff, 0xff, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 1*/

  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0xc0, 0x07, 
  0xdf, 0xf7, 
  0xdf, 0xf7, 
  0xc0, 0x07, 
  0xff, 0xfe, 
  0xff, 0xfe, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
  0x00, 0x00, 
};

const static lv_img_dsc_t BATTEY_3 = {
  .header.always_zero = 0,
  .header.w = 16,
  .header.h = 16,
  .data_size = 41,
  .header.cf = LV_IMG_CF_INDEXED_1BIT,
  .data = BATTEY_3_map,
};



#endif

