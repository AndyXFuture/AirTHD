/**
@page DMA_ADCTIMTransfer ADC DMA transfer to TIM3 example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    DMA/DMA_ADCTIMTransfer/readme.txt
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the ADC DMA transfer to TIM3 example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a description of how to use a DMA channel to transfer
continuously a data from a peripheral (ADC1) to another peripheral (TIM3) supporting
DMA transfer.The ADC channel11 for STM320518-EVAL or ADC channel10 for
STM32072B-EVAL is configured to be converted continuously. 
TIM3_CH1 is configured to generate a PWM signal on its output.

The dedicated DMA1 channel3 is configured to transfer in circular mode the last ADC 
channel11 converted value to the TIM3_CCR1 register. The DMA channel request is driven
by the TIM3 update event. The duty cycle of TIM3_CH1 output signal is then changed
each time the input voltage value on ADC channel is modified.

The duty cycle variation can be visualized on oscilloscope on the TIM3_CH1 pin
PA.06 while changing the analog input on ADC channel11 for STM320518-EVAL
or ADC channel10 for STM32072B-EVAL using the potentiometer.


@par Directory contents 

  - DMA/DMA_ADCTIMTransfer/stm32f0xx_conf.h    Library Configuration file
  - DMA/DMA_ADCTIMTransfer/stm32f0xx_it.c      Interrupt handlers
  - DMA/DMA_ADCTIMTransfer/stm32f0xx_it.h      Interrupt handlers header file
  - DMA/DMA_ADCTIMTransfer/main.c              Main program
  - DMA/DMA_ADCTIMTransfer/main.h              Header for main.c module
  - DMA/DMA_ADCTIMTransfer/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>

         
@par Hardware and Software environment

  - This example runs on STM32F0xx devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board

  - STM320518-EVAL Set-up
     - Use potentiometer RV3 connected to PC1
     - Connect TIM3_CH1 pin PA.06 to an oscilloscope to visualize the duty cycle variation 
  - STM32072B-EVAL Set-up
     - Use potentiometer RV3 connected to PC0
     - Connect TIM3_CH1 pin PA.06 to an oscilloscope to visualize the duty cycle variation 


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Select the appropriate workspace 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
