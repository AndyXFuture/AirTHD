/**
  @page RTC_Calendar RTC Hardware Calendar Description
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    RTC/RTC_Calendar/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the RTC Hardware Calendar example..
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example demonstrates and explains how to use the RTC peripheral.
As an application example, it demonstrates how to setup the RTC peripheral, in 
terms of prescaler and interrupts, to be used to keep time and to generate 
alarm interrupt. 

One of the following clock source can be used as RTC clock source (uncomment the
corresponding define in main.c): 
  - LSE oscillator clock usually delivered by a 32.768 kHz quartz.
  - LSI oscillator clock

The RTC is in the backup (BKP) domain, still powered by VBAT when VDD is switched off,
so the RTC configuration is not lost if a battery is connected to the VBAT pin. 
A key value is written in backup data register 0 to indicate if the RTC is already
configured

The program behaves as follows:

1. After startup the program checks the backup data register 0 value:
    - BKP_DR0 value not correct: (RTC_BKP_DR0 value is not correct or has not yet
      been programmed when the program is executed for the first time) the RTC is
      configured and the user is asked to set the time and alarm (entered on 
      HyperTerminal).
      LED2 is truned ON when the RTC configuration is done correctly.

    - BKP_DR0 value correct: this means that the RTC is configured and the time
      and Alarm A are displayed on HyperTerminal.

2. When an External Reset occurs the BKP domain is not reset and the RTC configuration
   is not lost.

3. When power on reset occurs:
    - If a battery is connected to the VBAT pin: the BKP domain is not reset and
      the RTC configuration is not lost.
      
    - If no battery is connected to the VBAT pin: the BKP domain is reset and the
      RTC configuration is lost.

4. When an RTC Alarm A event occurs the RTC Alarm interrupt is generated and the
   LED1 is toggled.
   
The example uses HyperTerminal to configure the RTC clock and display the current time:
 - When Joystcick SEL button is pressed, a menu is displayed to configure the RTC Time 
   and Alarm A registers.
 - When TAMPER button is pressed, the current time is displayed.
 - When Joystcick UP button is pressed, the current alarm A is displayed. 
 

@par Directory contents 

  - RTC/RTC_Calendar/stm32f0xx_conf.h    Library Configuration file
  - RTC/RTC_Calendar/stm32f0xx_it.c      Interrupt handlers
  - RTC/RTC_Calendar/stm32f0xx_it.h      Interrupt handlers header file
  - RTC/RTC_Calendar/main.c              Main program
  - RTC/RTC_Calendar/main.h              Main program header file
  - RTC/RTC_Calendar/system_stm32f0xx.c  STM32F0xx system source file
         
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>


@par Hardware and Software environment

  - This example runs on STM32F0xx Devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board.

  - STM320518-EVAL Set-up
    - Use TAMPER and Joystcick UP/SEL push buttons
    - Make sure that jumper JP12 is in position 2-3 to connect the 3V battery to VBAT pin
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN7 (USART1) and PC serial port to display data on the HyperTerminal.
  
  - STM32072B-EVAL Set-up
    - Use TAMPER and Joystcick UP/SEL push buttons
    - Make sure that jumper JP11 is in position 2-3 to connect the 3V battery to VBAT pin
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN7 (USART2) and PC serial port to display data on the HyperTerminal.

    - Hyperterminal configuration:
      - Word Length = 8 Bits
      - One Stop Bit
      - No parity
      - BaudRate = 115200 baud
      - flow control: None


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - If the used device is STM32F051R8T6 choose STM32F051 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval.c
       
 - If the used device is STM32F072VBT6 choose STM32F072 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.c
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
