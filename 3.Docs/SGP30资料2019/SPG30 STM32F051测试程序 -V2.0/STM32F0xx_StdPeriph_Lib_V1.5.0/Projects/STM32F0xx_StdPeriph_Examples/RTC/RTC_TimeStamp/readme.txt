/**
  @page RTC_TimeStamp RTC TimeStamp example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    RTC/RTC_TimeStamp/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the RTC TimeStamp example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

 This example provides a short description of how to use the RTC peripheral and 
the Time Stamp feature.

One of the following clock can be used as RTC clock source (uncomment the
corresponding define in main.c):
  - LSE oscillator clock usually delivered by a 32.768 kHz quartz.
  - LSI oscillator clock

The program behaves as follow:

1. At startup the program checks the backup data register 0 value:   
    - BKP_DR0 value correct: this means that the RTC is configured and the time
      date and timestamp (time and date) are displayed.

2. When an External Reset occurs the BKP domain is not reset and the RTC configuration
   is not lost.

3. When power on reset occurs:
    - If a battery is connected to the VBAT pin : 
      the BKP domain is not reset and the RTC configuration is not lost.
      
    - If no battery is connected to the VBAT pin : 
      the BKP domain is reset and the RTC configuration is lost.

4. It configures the RTC TimeStamp pin to be falling edge and enables the
TimeStamp detection.

5. Applying a low level on the TimeStamp pin (PC.13) by pressing TAMPER push button,
the calendar is saved in the time-stamp registers thanks to the timestamp event detection.
   
The example uses HyperTerminal to configure the RTC clock, display the current 
time and timestamp registers contents:
 - Pressing TAMPER push button, saves the current time and date in RTC TSTR
   and TSDR registers and  displays the current RTC Calendar (Time and date) and
   RTC TimeStamp Calendar (Time and date). LED2 turns ON.
 - Pressing SEL push button, clears the TimeStamp Calendar. LED1 turns ON.
 
@par Directory contents 

  - RTC/RTC_TimeStamp/system_stm32f0xx.c   STM32F4xx system clock configuration file
  - RTC/RTC_TimeStamp/stm32f0xx_conf.h     Library Configuration file
  - RTC/RTC_TimeStamp/stm32f0xx_it.c       Interrupt handlers
  - RTC/RTC_TimeStamp/stm32f0xx_it.h       Header for stm32f4xx_it.c
  - RTC/RTC_TimeStamp/main.c               Main program
  - RTC/RTC_TimeStamp/main.h               Main header file

@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
 
       
@par Hardware and Software environment 

  - This example runs on STM32F0xx Devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board.

  - STM320518-EVAL Set-up
    - Use SEL push button. 
    - Use the TAMPER push button connected to PC.13 pin (EXTI Line13).
    
  - STM32072B-EVAL Set-up
    - Use SEL push button. 
    - Use the TAMPER push button connected to PC.13 pin (EXTI Line13).

       
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - If the used device is STM32F051R8T6 choose STM32F051 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval.c
       - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval_lcd.c
       
 - If the used device is STM32F072VBT6 choose STM32F072 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.c
       - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval_lcd.c
 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
