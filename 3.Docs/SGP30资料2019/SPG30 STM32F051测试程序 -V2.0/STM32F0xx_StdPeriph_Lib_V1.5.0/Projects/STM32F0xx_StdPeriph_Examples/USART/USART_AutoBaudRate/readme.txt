/**
  @page USART_AutoBaudRate USART AutoBaudRate Example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    USART/USART_AutoBaudRate/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the USART AutoBaudRate Example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a description of how to use the Auto BaudRate capability
of the USART via the HyperTerminal.

First, the USART1(STM32F051R8T6 devices) or USART2(STM32F072VBT6 devices) is configured
to detect BaudRate automatically with StartBit Measurement Method (Any character 
starting with a bit at 1 should be send to USART to detect Baud Rate).

After configuration, the USART waits until a data is received via HyperTerminal
to launch auto-detection of Baud Rate phase. The end of this phase is monitored 
by ABRF flag.

The result of auto-detection is indicated by EVAL Board LEDs. If an error occurred 
in Auto BaudRate phase ABRE flag is set and LED3 is turned on. If this phase is 
completed successfully, LED2 is turned on and the received data is transmitted back 
to the HyperTerminal.
You can repeat this procedure by changing the BaudRate on HyperTerminal side.
 
The USART is configured as follow:
    - BaudRate = 115200 baud (any value can be chosen)  
    - Word Length = 8 Bits 
    - One Stop Bit
    - No parity
    - Hardware flow control disabled (RTS and CTS signals)
    - Receive and transmit enabled


@par Directory contents 

  - USART/USART_AutoBaudRate/stm32f0xx_conf.h    Library Configuration file
  - USART/USART_AutoBaudRate/stm32f0xx_it.c      Interrupt handlers
  - USART/USART_AutoBaudRate/stm32f0xx_it.h      Interrupt handlers header file
  - USART/USART_AutoBaudRate/main.c              Main program   
  - USART/USART_AutoBaudRate/main.h              Main program header file 
  - USART/USART_AutoBaudRate/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>

         
@par Hardware and Software environment

  - This example runs on STM32F0xx devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board

  - STM320518-EVAL Set-up
      - Connect a null-modem female/female RS232 cable between the DB9 connector 
        CN7 and PC serial port.
      - Make sure that JP3 is in position 5<->6  
      
  - STM32072B-EVAL Set-up  
      - Connect a null-modem female/female RS232 cable between the DB9 connector 
        CN10 and PC serial port.
      - Make sure that JP17 is in position 5<->6 

  - Hyperterminal configuration:
    - BaudRate = User can select any value
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - flow control: None 


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Select STM32F051 workspace 
 - If the used device is STM32F051R8T6 choose STM32F051 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval.c
 - If the used device is STM32F072VBT6 choose STM32F072 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.cc 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
