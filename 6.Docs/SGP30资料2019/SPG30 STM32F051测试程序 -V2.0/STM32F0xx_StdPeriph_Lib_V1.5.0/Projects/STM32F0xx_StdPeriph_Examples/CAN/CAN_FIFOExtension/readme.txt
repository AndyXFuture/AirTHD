/**
  @page CAN_FIFOExtension CAN FIFO Extension example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    CAN/CAN_FIFOExtension/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the CAN FIFO Extension example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *   
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to configure the CAN peripheral to send and receive 
CAN frames in normal mode using FIFO0 and FIFO1. This application example shows 
how to manage the both CAN FIFO as a single FIFO composed by 6 mail boxes.

The CAN serial communication link is a bus to which a number of units may be
connected. This number has no theoretical limit. Practically the total number
of units will be limited by delay times and/or electrical loads on the bus line.

This program behaves as follows:
  - By Pressing on TAMPER Button : 6 messages are sent to the N eval boards 
    connected to the bus and the received messages are displayed on the LCD
    each time 6 messages are sent.
    
@note This example is tested with a bus of 3 units. The same program example is 
      loaded in all units to send and receive frames.
@note Any unit in the CAN bus may play the role of sender (by pressing TAMPER button)
      or receiver.

The CAN is configured as follow:
    - Bit Rate   = 1 Mbit/s  
    - CAN Clock  = external clock (HSE)
    - ID Filter  = All identifiers are allowed
    - RTR = Data
    - DLC = 1 byte
    - Data: Led number that should be turned ON


@par Directory contents 

  - CAN/CAN_FIFOExtension/stm32f0xx_conf.h    Library Configuration file
  - CAN/CAN_FIFOExtension/stm32f0xx_it.c      Interrupt handlers
  - CAN/CAN_FIFOExtension/stm32f0xx_it.h      Interrupt handlers header file
  - CAN/CAN_FIFOExtension/main.c              Main program
  - CAN/CAN_FIFOExtension/main.h              Main program header file
  - CAN/CAN_FIFOExtension/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN4152 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32F072 Devices.
  
  - This example has been tested with STMicroelectronics STM32072B-EVAL including
    STM32F072VBT6 device and can be easily tailored to any other supported device 
    and development board.

  - STM32072B-EVAL Set-up
    - Use TAMPER Push Button connected to PC.13
    - Connect a female/female CAN cable between at least 2 EVAL CAN connectors (CN6)
    - Jumper JP4 must be fitted in 1-2 position
    - Jumper JP3 must be fitted.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Add the following files to the project source list
    - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.c
    - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval_lcd.c
 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
