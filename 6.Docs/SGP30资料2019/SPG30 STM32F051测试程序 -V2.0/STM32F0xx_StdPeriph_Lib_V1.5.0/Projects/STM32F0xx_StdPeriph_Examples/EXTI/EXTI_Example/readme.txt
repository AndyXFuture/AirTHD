/**
  @page EXTI_Example EXTI Configuration Example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    EXTI/EXTI_Example/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the EXTI example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to configure external interrupt lines.
In this example, 4 EXTI lines (EXTI0, EXTI2, EXTI3 and EXTI13) when using the STM32072B-EVAL
or 4EXTI lines (EXTI0, EXTI8, EXTI9, EXTI13) when using the STM320518-EVAL are configured to
generate an interrupt on each falling edge. In the interrupt routine a led connected to a 
specific GPIO pin is toggled.

In this example
    - EXTI0  is mapped to PA0
    - EXTI13 is mapped to PC13
    If STM32F051R8T6 device is used
       - EXTI3  is mapped to PE3
       - EXTI2  is mapped to PE2 
    If STM32F072VBT6 device is used
       - EXTI8  is mapped to PC8
       - EXTI9  is mapped to PC9 


After EXTI configuration, a software interrupt is generated on the EXTI8 and LED1 toggles.
After that,
  when falling edge is detected on EXTI0, LED2 toggles
  when falling edge is detected on EXTI13, LED4 toggles
  If STM32F051R8T6 device is used
      when falling edge is detected on EXTI3, LED1 toggles
      when falling edge is detected on EXTI2, LED3 toggles
  If STM32F072VBT6 device is used
      when falling edge is detected on EXTI8, LED1 toggles
      when falling edge is detected on EXTI9, LED3 toggles


If STM320518-EVAL or STM32072B-EVAL is used,
  when Joystick Sel push-button is pressed, LED2 toggles
  when Joystick Right push-button is pressed, LED1 toggles
  when Joystick Left push-button is pressed, LED3 toggles
  when Tamper push-button is pressed, LED4 toggles

In this example, EXTI0_Config() function can be substituted by 
STM_EVAL_PBInit(BUTTON_SEL, Mode_EXTI) provided in the STM320518-EVAL driver.


@par Directory contents 

  - EXTI/EXTI_Example/stm32f0xx_conf.h    Library Configuration file
  - EXTI/EXTI_Example/stm32f0xx_it.c      Interrupt handlers
  - EXTI/EXTI_Example/stm32f0xx_it.h      Interrupt handlers header file
  - EXTI/EXTI_Example/main.c              Main program
  - EXTI/EXTI_Example/main.h              Main program  header file  
  - EXTI/EXTI_Example/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>
         

@par Hardware and Software environment

  - This example runs on STM32F0xx Devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board.

  - STM320518-EVAL Set-up
     - Use Joystick Right, Left and Sel push-button
     - USe Tamper push-button
  - STM32072B-EVAL Set-up
     - Use Joystick Right, Left and Sel push-button
     - USe Tamper push-button   


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Open your preferred toolchain
 - If the used device is STM32F051R8T6 choose STM32F051 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval.c
 - If the used device is STM32F072VBT6 choose STM32F072 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.c
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
