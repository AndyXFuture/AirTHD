/**
  @page IWDG_Reset IWDG Reset example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    IWDG/IWDG_Reset/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the IWDG Reset example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to update at regular period the IWDG reload counter and 
how to simulate a software fault generating an MCU IWDG reset on expiry of a 
programmed time period.

When "LSI_TIM_MEASURE" define is enabled in main.h, TIM14 is configured to measure
the LSI frequency as the LSI is internally connected to TIM14 CH1, in order to adjust
the IWDG prescaler to have accurate timeout.
The LSI measurement using the TIM14 is described below:
 - Configure the TIM14 to remap internally the TIM14 Channel 1 Input Capture to 
   the LSI clock output.
 - Enable the TIM14 Input Capture interrupt: after one cycle of LSI clock, the
   period value is stored in a variable and compared to the HCLK clock to get
   its real value. 

When "LSI_TIM_MEASURE" define is disabled, the LSI frequency is set to 40 KHz,
which will generate less accurate IWDG timeout.

Then, the IWDG reload counter is configured to obtain a time out of 250 ms(the timeout
may varies due to LSI frequency dispersion).

The IWDG reload counter is refreshed each 220 ms in the main program infinite loop 
to prevent a IWDG reset. LED2 is also toggled each 220 ms indicating that the program
is running.

An EXTI Line is connected to a GPIO pin, and configured to generate an interrupt
on the rising edge of the signal.
The EXTI Line is used to simulate a software failure: once the EXTI Line event 
occurs, by pressing the Tamper push-button, the corresponding interrupt is served.
In the ISR, a write to invalid address generates a Hardfault exception containing
an infinite loop and preventing to return to main program (the IWDG reload counter 
is not refreshed).
As a result, when the IWDG counter reaches 00h, the IWDG reset occurs.
If the IWDG reset is generated, after the system resumes from reset, LED1 turns on.

If the EXTI Line event does not occur, the IWDG counter is indefinitely refreshed
in the main program infinite loop, and there is no IWDG reset.


@par Directory contents
  - IWDG/IWDG_Reset/stm32f0xx_conf.h     Library Configuration file
  - IWDG/IWDG_Reset/stm32f0xx_it.c       Interrupt handlers
  - IWDG/IWDG_Reset/stm32f0xx_it.h       Interrupt handlers header file
  - IWDG/IWDG_Reset/main.c               Main program
  - IWDG/IWDG_Reset/main.h               Header for main.c module
  - IWDG/IWDG_Reset/system_stm32f0xx.c   STM32F0xx system source file

@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment

  - This example runs on STM32F0xx devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board

  - STM320518-EVAL Set-up
     - Use the Tamper Button push button   
     
  - STM32072B-EVAL Set-up  
     - Use the Tamper Button push button

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - If the used device is STM32F051R8T6 choose STM32F051 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval.c
 - If the used device is STM32F072VBT6 choose STM32F072 project
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.c
 - Rebuild all files and load your image into target memory
 - Run the example
        
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
