/**
  @page TIM_PWM_Input TIM_PWM_Input
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    TIM/TIM_PWMInput/readme.txt 
  * @author  MCD Application Team
  * @version V1.4.0
  * @date    24-July-2014
  * @brief   Description of the TIM PWM_Input example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to use the TIM peripheral to measure the frequency and 
duty cycle of an external signal.

The TIM2 Clock frequency is set to SystemCoreClock(Hz), the Prescaler is 0 so the 
counter clock is SystemCoreClock(Hz).
SystemCoreClock is set to 48 MHz in this example.

TIM2 is configured in PWM Input Mode: the external signal is connected to 
TIM2 Channel2 used as input pin.

To measure the frequency and the duty cycle we use the TIM2 CC2 interrupt request,
so In the TIM2_IRQHandler routine, the frequency and the duty cycle of the external 
signal are computed. 

The "Frequency" variable contains the external signal frequency:
  TIM2 counter clock = SystemCoreClock
  Frequency = TIM2 counter clock / TIM2_CCR2 in Hz 

The "DutyCycle" variable contains the external signal duty cycle:
   DutyCycle = (TIM2_CCR1*100)/(TIM2_CCR2) in %.

The minimum frequency value to measure is 733 Hz (TIM2 counter clock / CCR MAX). 
 

@par Directory contents 

  - TIM/TIM_PWMInput/stm32f0xx_conf.h    Library Configuration file
  - TIM/TIM_PWMInput/stm32f0xx_it.c      Interrupt handlers
  - TIM/TIM_PWMInput/stm32f0xx_it.h      Interrupt handlers header file
  - TIM/TIM_PWMInput/main.c              Main program            
  - TIM/TIM_PWMInput/main.h              Header for main.c module        
  - TIM/TIM_PWMInput/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32F0xx devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board

  - STM320518-EVAL Set-up
    - Connect the external signal to the TIM2 CH2 pin (PA.01) to measure the frequency and 
      duty cycle 
  - STM32072B-EVAL Set-up
    - Connect the external signal to the TIM2 CH2 pin (PA.01) to measure the frequency and 
      duty cycle 



@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Select the appropriate workspace
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
